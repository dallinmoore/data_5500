{"filter":false,"title":"find_arbitrage.py","tooltip":"/final-project/find_arbitrage.py","undoManager":{"mark":3,"position":3,"stack":[[{"start":{"row":0,"column":0},"end":{"row":30,"column":20},"action":"insert","lines":["def find_arbitrage(graph):","    arbitrage = []","    # find all simple cycles in the graph","    cycles = nx.simple_cycles(graph)","","    # iterate over each cycle, going both directions","    # if there is a cycle one direction, there must be one in the other direction","    for cycle in cycles:","        opposite_cycle = cycle[::-1]","        weight_product = 1.0","        weight_product2 = 1.0","        for i in range(len(cycle) - 1):","            source = cycle[i]","            source2 = opposite_cycle[i]","            target = cycle[i + 1]","            target2 = opposite_cycle[i + 1]","            # get the weight of the edge between source and target","            weight = graph[source][target]['weight']","            weight2 = graph[source2][target2]['weight']","            weight_product *= weight","            weight_product2 *= weight2","        print(cycle, weight_product)","        print(opposite_cycle, weight_product2)","","        # check if the product is greater or less than 1","        product = weight_product*weight_product2","        if product > 1 or product < 1:","            print(product)","            arbitrage.append((cycle, product))","","    return arbitrage"],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":2},{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["import networkx as nx",""],"id":3}],[{"start":{"row":0,"column":21},"end":{"row":1,"column":0},"action":"remove","lines":["",""],"id":4}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":20,"column":30},"end":{"row":20,"column":30},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1714449026033,"hash":"db31eef4570c5833b3305575ea6dfb6e1a969839"}